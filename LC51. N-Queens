class Solution {
public:
bool issafe(vector<vector<char>>&board,int row,int col){
    int n=board.size();
    
     for(int j=0;j<row;j++){
        if(board[j][col]=='Q'){
            return false;
        }
     }
        for(int i=row,j=col;i>=0 && j>=0;i--,j--){
            if(board[i][j]=='Q'){
                return false;
            }
        }
         for(int i=row,j=col;i>=0 && j<n;i--,j++){
            if(board[i][j]=='Q'){
                return false;
            }
        }
    return true;
}
void nqueen(vector<vector<char>>&board,int n,int row,vector<vector<string>>&ans){

    if(row==n){
        vector<string>curr;
        for(int i=0;i<n;i++){
            curr.push_back(string(board[i].begin(),board[i].end()));
        }
        ans.push_back(curr);
        return;
    }
    for(int i=0;i<n;i++){
        if(issafe(board,row,i)){
           board[row][i]='Q';
          nqueen(board,n,row+1,ans);
          board[row][i]='.';
        }
          
    }
}
    vector<vector<string>> solveNQueens(int n) {
         vector<vector<char>>board(n,vector<char>(n,'.'));
         vector<vector<string>>ans;
         nqueen(board,n,0,ans);
         return ans;
    }
};
