class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int,int>>q;
        int n=grid.size();
        int m=grid[0].size();
        int ans=0;
        int fresh=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    q.push({i,j});
                }
                if(grid[i][j]==1){
                    fresh++;
                }
            }
        }
        if(fresh==0) return 0;
        vector<int>dr={0,0,1,-1};
            vector<int>dc={1,-1,0,0};
        while(!q.empty()){
            int s=q.size();
            for(int i=0;i<s;i++){
            pair<int,int>curr=q.front();
            q.pop();
            
            for(int i=0;i<4;i++){
                    int r=dr[i]+curr.first;
                    int c=dc[i]+curr.second;
                    if(r<n && r>=0 && c>=0&& c<m && grid[r][c]==1 ){
                        grid[r][c]=2;
                        fresh--;
                        q.push({r,c});
                   }    
            }
        }
        if(!q.empty()) ans++;
        }
        return fresh==0? ans:-1;
    }
};
